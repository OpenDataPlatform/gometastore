// Code generated by Thrift Compiler (0.14.2). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/SergeAlexandre/gometastore/hmsclient/thrift/gen-go/hive_metastore"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = hive_metastore.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
	fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints)")
	fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
	fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
	fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
	fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
	fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
	fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
	fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
	fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
	fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
	fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
	fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
	fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
	fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
	fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
	fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
	fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
	fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
	fmt.Fprintln(os.Stderr, "   get_master_keys()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
	fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
	fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
	fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
	fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
	fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
	fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void flushCache()")
	fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
	fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getMetaConf":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMetaConf(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setMetaConf":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg800 := flag.Arg(1)
		mbTrans801 := thrift.NewTMemoryBufferLen(len(arg800))
		defer mbTrans801.Close()
		_, err802 := mbTrans801.WriteString(arg800)
		if err802 != nil {
			Usage()
			return
		}
		factory803 := thrift.NewTJSONProtocolFactory()
		jsProt804 := factory803.GetProtocol(mbTrans801)
		argvalue0 := hive_metastore.NewDatabase()
		err805 := argvalue0.Read(context.Background(), jsProt804)
		if err805 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases(context.Background()))
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg812 := flag.Arg(2)
		mbTrans813 := thrift.NewTMemoryBufferLen(len(arg812))
		defer mbTrans813.Close()
		_, err814 := mbTrans813.WriteString(arg812)
		if err814 != nil {
			Usage()
			return
		}
		factory815 := thrift.NewTJSONProtocolFactory()
		jsProt816 := factory815.GetProtocol(mbTrans813)
		argvalue1 := hive_metastore.NewDatabase()
		err817 := argvalue1.Read(context.Background(), jsProt816)
		if err817 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg819 := flag.Arg(1)
		mbTrans820 := thrift.NewTMemoryBufferLen(len(arg819))
		defer mbTrans820.Close()
		_, err821 := mbTrans820.WriteString(arg819)
		if err821 != nil {
			Usage()
			return
		}
		factory822 := thrift.NewTJSONProtocolFactory()
		jsProt823 := factory822.GetProtocol(mbTrans820)
		argvalue0 := hive_metastore.NewType()
		err824 := argvalue0.Read(context.Background(), jsProt823)
		if err824 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_fields_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg831 := flag.Arg(3)
		mbTrans832 := thrift.NewTMemoryBufferLen(len(arg831))
		defer mbTrans832.Close()
		_, err833 := mbTrans832.WriteString(arg831)
		if err833 != nil {
			Usage()
			return
		}
		factory834 := thrift.NewTJSONProtocolFactory()
		jsProt835 := factory834.GetProtocol(mbTrans832)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err836 := argvalue2.Read(context.Background(), jsProt835)
		if err836 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg841 := flag.Arg(3)
		mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
		defer mbTrans842.Close()
		_, err843 := mbTrans842.WriteString(arg841)
		if err843 != nil {
			Usage()
			return
		}
		factory844 := thrift.NewTJSONProtocolFactory()
		jsProt845 := factory844.GetProtocol(mbTrans842)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err846 := argvalue2.Read(context.Background(), jsProt845)
		if err846 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg847 := flag.Arg(1)
		mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
		defer mbTrans848.Close()
		_, err849 := mbTrans848.WriteString(arg847)
		if err849 != nil {
			Usage()
			return
		}
		factory850 := thrift.NewTJSONProtocolFactory()
		jsProt851 := factory850.GetProtocol(mbTrans848)
		argvalue0 := hive_metastore.NewTable()
		err852 := argvalue0.Read(context.Background(), jsProt851)
		if err852 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_table_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg853 := flag.Arg(1)
		mbTrans854 := thrift.NewTMemoryBufferLen(len(arg853))
		defer mbTrans854.Close()
		_, err855 := mbTrans854.WriteString(arg853)
		if err855 != nil {
			Usage()
			return
		}
		factory856 := thrift.NewTJSONProtocolFactory()
		jsProt857 := factory856.GetProtocol(mbTrans854)
		argvalue0 := hive_metastore.NewTable()
		err858 := argvalue0.Read(context.Background(), jsProt857)
		if err858 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg859 := flag.Arg(2)
		mbTrans860 := thrift.NewTMemoryBufferLen(len(arg859))
		defer mbTrans860.Close()
		_, err861 := mbTrans860.WriteString(arg859)
		if err861 != nil {
			Usage()
			return
		}
		factory862 := thrift.NewTJSONProtocolFactory()
		jsProt863 := factory862.GetProtocol(mbTrans860)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err864 := argvalue1.Read(context.Background(), jsProt863)
		if err864 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_table_with_constraints":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 5 args")
			flag.Usage()
		}
		arg865 := flag.Arg(1)
		mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
		defer mbTrans866.Close()
		_, err867 := mbTrans866.WriteString(arg865)
		if err867 != nil {
			Usage()
			return
		}
		factory868 := thrift.NewTJSONProtocolFactory()
		jsProt869 := factory868.GetProtocol(mbTrans866)
		argvalue0 := hive_metastore.NewTable()
		err870 := argvalue0.Read(context.Background(), jsProt869)
		if err870 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg871 := flag.Arg(2)
		mbTrans872 := thrift.NewTMemoryBufferLen(len(arg871))
		defer mbTrans872.Close()
		_, err873 := mbTrans872.WriteString(arg871)
		if err873 != nil {
			Usage()
			return
		}
		factory874 := thrift.NewTJSONProtocolFactory()
		jsProt875 := factory874.GetProtocol(mbTrans872)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err876 := containerStruct1.ReadField2(context.Background(), jsProt875)
		if err876 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.PrimaryKeys
		value1 := argvalue1
		arg877 := flag.Arg(3)
		mbTrans878 := thrift.NewTMemoryBufferLen(len(arg877))
		defer mbTrans878.Close()
		_, err879 := mbTrans878.WriteString(arg877)
		if err879 != nil {
			Usage()
			return
		}
		factory880 := thrift.NewTJSONProtocolFactory()
		jsProt881 := factory880.GetProtocol(mbTrans878)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err882 := containerStruct2.ReadField3(context.Background(), jsProt881)
		if err882 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ForeignKeys
		value2 := argvalue2
		arg883 := flag.Arg(4)
		mbTrans884 := thrift.NewTMemoryBufferLen(len(arg883))
		defer mbTrans884.Close()
		_, err885 := mbTrans884.WriteString(arg883)
		if err885 != nil {
			Usage()
			return
		}
		factory886 := thrift.NewTJSONProtocolFactory()
		jsProt887 := factory886.GetProtocol(mbTrans884)
		containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err888 := containerStruct3.ReadField4(context.Background(), jsProt887)
		if err888 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.UniqueConstraints
		value3 := argvalue3
		arg889 := flag.Arg(5)
		mbTrans890 := thrift.NewTMemoryBufferLen(len(arg889))
		defer mbTrans890.Close()
		_, err891 := mbTrans890.WriteString(arg889)
		if err891 != nil {
			Usage()
			return
		}
		factory892 := thrift.NewTJSONProtocolFactory()
		jsProt893 := factory892.GetProtocol(mbTrans890)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err894 := containerStruct4.ReadField5(context.Background(), jsProt893)
		if err894 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.NotNullConstraints
		value4 := argvalue4
		fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
			flag.Usage()
		}
		arg895 := flag.Arg(1)
		mbTrans896 := thrift.NewTMemoryBufferLen(len(arg895))
		defer mbTrans896.Close()
		_, err897 := mbTrans896.WriteString(arg895)
		if err897 != nil {
			Usage()
			return
		}
		factory898 := thrift.NewTJSONProtocolFactory()
		jsProt899 := factory898.GetProtocol(mbTrans896)
		argvalue0 := hive_metastore.NewDropConstraintRequest()
		err900 := argvalue0.Read(context.Background(), jsProt899)
		if err900 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_primary_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
			flag.Usage()
		}
		arg901 := flag.Arg(1)
		mbTrans902 := thrift.NewTMemoryBufferLen(len(arg901))
		defer mbTrans902.Close()
		_, err903 := mbTrans902.WriteString(arg901)
		if err903 != nil {
			Usage()
			return
		}
		factory904 := thrift.NewTJSONProtocolFactory()
		jsProt905 := factory904.GetProtocol(mbTrans902)
		argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
		err906 := argvalue0.Read(context.Background(), jsProt905)
		if err906 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPrimaryKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_foreign_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
			flag.Usage()
		}
		arg907 := flag.Arg(1)
		mbTrans908 := thrift.NewTMemoryBufferLen(len(arg907))
		defer mbTrans908.Close()
		_, err909 := mbTrans908.WriteString(arg907)
		if err909 != nil {
			Usage()
			return
		}
		factory910 := thrift.NewTJSONProtocolFactory()
		jsProt911 := factory910.GetProtocol(mbTrans908)
		argvalue0 := hive_metastore.NewAddForeignKeyRequest()
		err912 := argvalue0.Read(context.Background(), jsProt911)
		if err912 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddForeignKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_unique_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
			flag.Usage()
		}
		arg913 := flag.Arg(1)
		mbTrans914 := thrift.NewTMemoryBufferLen(len(arg913))
		defer mbTrans914.Close()
		_, err915 := mbTrans914.WriteString(arg913)
		if err915 != nil {
			Usage()
			return
		}
		factory916 := thrift.NewTJSONProtocolFactory()
		jsProt917 := factory916.GetProtocol(mbTrans914)
		argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
		err918 := argvalue0.Read(context.Background(), jsProt917)
		if err918 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_not_null_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
			flag.Usage()
		}
		arg919 := flag.Arg(1)
		mbTrans920 := thrift.NewTMemoryBufferLen(len(arg919))
		defer mbTrans920.Close()
		_, err921 := mbTrans920.WriteString(arg919)
		if err921 != nil {
			Usage()
			return
		}
		factory922 := thrift.NewTJSONProtocolFactory()
		jsProt923 := factory922.GetProtocol(mbTrans920)
		argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
		err924 := argvalue0.Read(context.Background(), jsProt923)
		if err924 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg931 := flag.Arg(4)
		mbTrans932 := thrift.NewTMemoryBufferLen(len(arg931))
		defer mbTrans932.Close()
		_, err933 := mbTrans932.WriteString(arg931)
		if err933 != nil {
			Usage()
			return
		}
		factory934 := thrift.NewTJSONProtocolFactory()
		jsProt935 := factory934.GetProtocol(mbTrans932)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err936 := argvalue3.Read(context.Background(), jsProt935)
		if err936 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "truncate_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg939 := flag.Arg(3)
		mbTrans940 := thrift.NewTMemoryBufferLen(len(arg939))
		defer mbTrans940.Close()
		_, err941 := mbTrans940.WriteString(arg939)
		if err941 != nil {
			Usage()
			return
		}
		factory942 := thrift.NewTJSONProtocolFactory()
		jsProt943 := factory942.GetProtocol(mbTrans940)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
		err944 := containerStruct2.ReadField3(context.Background(), jsProt943)
		if err944 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartNames
		value2 := argvalue2
		fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_tables_by_type":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_table_meta":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg952 := flag.Arg(3)
		mbTrans953 := thrift.NewTMemoryBufferLen(len(arg952))
		defer mbTrans953.Close()
		_, err954 := mbTrans953.WriteString(arg952)
		if err954 != nil {
			Usage()
			return
		}
		factory955 := thrift.NewTJSONProtocolFactory()
		jsProt956 := factory955.GetProtocol(mbTrans953)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
		err957 := containerStruct2.ReadField3(context.Background(), jsProt956)
		if err957 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TblTypes
		value2 := argvalue2
		fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg962 := flag.Arg(2)
		mbTrans963 := thrift.NewTMemoryBufferLen(len(arg962))
		defer mbTrans963.Close()
		_, err964 := mbTrans963.WriteString(arg962)
		if err964 != nil {
			Usage()
			return
		}
		factory965 := thrift.NewTJSONProtocolFactory()
		jsProt966 := factory965.GetProtocol(mbTrans963)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
		err967 := containerStruct1.ReadField2(context.Background(), jsProt966)
		if err967 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.TblNames
		value1 := argvalue1
		fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
			flag.Usage()
		}
		arg968 := flag.Arg(1)
		mbTrans969 := thrift.NewTMemoryBufferLen(len(arg968))
		defer mbTrans969.Close()
		_, err970 := mbTrans969.WriteString(arg968)
		if err970 != nil {
			Usage()
			return
		}
		factory971 := thrift.NewTJSONProtocolFactory()
		jsProt972 := factory971.GetProtocol(mbTrans969)
		argvalue0 := hive_metastore.NewGetTableRequest()
		err973 := argvalue0.Read(context.Background(), jsProt972)
		if err973 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
			flag.Usage()
		}
		arg974 := flag.Arg(1)
		mbTrans975 := thrift.NewTMemoryBufferLen(len(arg974))
		defer mbTrans975.Close()
		_, err976 := mbTrans975.WriteString(arg974)
		if err976 != nil {
			Usage()
			return
		}
		factory977 := thrift.NewTJSONProtocolFactory()
		jsProt978 := factory977.GetProtocol(mbTrans975)
		argvalue0 := hive_metastore.NewGetTablesRequest()
		err979 := argvalue0.Read(context.Background(), jsProt978)
		if err979 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_names_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err982 := (strconv.Atoi(flag.Arg(3)))
		if err982 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg985 := flag.Arg(3)
		mbTrans986 := thrift.NewTMemoryBufferLen(len(arg985))
		defer mbTrans986.Close()
		_, err987 := mbTrans986.WriteString(arg985)
		if err987 != nil {
			Usage()
			return
		}
		factory988 := thrift.NewTJSONProtocolFactory()
		jsProt989 := factory988.GetProtocol(mbTrans986)
		argvalue2 := hive_metastore.NewTable()
		err990 := argvalue2.Read(context.Background(), jsProt989)
		if err990 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg993 := flag.Arg(3)
		mbTrans994 := thrift.NewTMemoryBufferLen(len(arg993))
		defer mbTrans994.Close()
		_, err995 := mbTrans994.WriteString(arg993)
		if err995 != nil {
			Usage()
			return
		}
		factory996 := thrift.NewTJSONProtocolFactory()
		jsProt997 := factory996.GetProtocol(mbTrans994)
		argvalue2 := hive_metastore.NewTable()
		err998 := argvalue2.Read(context.Background(), jsProt997)
		if err998 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg999 := flag.Arg(4)
		mbTrans1000 := thrift.NewTMemoryBufferLen(len(arg999))
		defer mbTrans1000.Close()
		_, err1001 := mbTrans1000.WriteString(arg999)
		if err1001 != nil {
			Usage()
			return
		}
		factory1002 := thrift.NewTJSONProtocolFactory()
		jsProt1003 := factory1002.GetProtocol(mbTrans1000)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1004 := argvalue3.Read(context.Background(), jsProt1003)
		if err1004 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_table_with_cascade":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1007 := flag.Arg(3)
		mbTrans1008 := thrift.NewTMemoryBufferLen(len(arg1007))
		defer mbTrans1008.Close()
		_, err1009 := mbTrans1008.WriteString(arg1007)
		if err1009 != nil {
			Usage()
			return
		}
		factory1010 := thrift.NewTJSONProtocolFactory()
		jsProt1011 := factory1010.GetProtocol(mbTrans1008)
		argvalue2 := hive_metastore.NewTable()
		err1012 := argvalue2.Read(context.Background(), jsProt1011)
		if err1012 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg1014 := flag.Arg(1)
		mbTrans1015 := thrift.NewTMemoryBufferLen(len(arg1014))
		defer mbTrans1015.Close()
		_, err1016 := mbTrans1015.WriteString(arg1014)
		if err1016 != nil {
			Usage()
			return
		}
		factory1017 := thrift.NewTJSONProtocolFactory()
		jsProt1018 := factory1017.GetProtocol(mbTrans1015)
		argvalue0 := hive_metastore.NewPartition()
		err1019 := argvalue0.Read(context.Background(), jsProt1018)
		if err1019 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partition_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg1020 := flag.Arg(1)
		mbTrans1021 := thrift.NewTMemoryBufferLen(len(arg1020))
		defer mbTrans1021.Close()
		_, err1022 := mbTrans1021.WriteString(arg1020)
		if err1022 != nil {
			Usage()
			return
		}
		factory1023 := thrift.NewTJSONProtocolFactory()
		jsProt1024 := factory1023.GetProtocol(mbTrans1021)
		argvalue0 := hive_metastore.NewPartition()
		err1025 := argvalue0.Read(context.Background(), jsProt1024)
		if err1025 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1026 := flag.Arg(2)
		mbTrans1027 := thrift.NewTMemoryBufferLen(len(arg1026))
		defer mbTrans1027.Close()
		_, err1028 := mbTrans1027.WriteString(arg1026)
		if err1028 != nil {
			Usage()
			return
		}
		factory1029 := thrift.NewTJSONProtocolFactory()
		jsProt1030 := factory1029.GetProtocol(mbTrans1027)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err1031 := argvalue1.Read(context.Background(), jsProt1030)
		if err1031 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "add_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
			flag.Usage()
		}
		arg1032 := flag.Arg(1)
		mbTrans1033 := thrift.NewTMemoryBufferLen(len(arg1032))
		defer mbTrans1033.Close()
		_, err1034 := mbTrans1033.WriteString(arg1032)
		if err1034 != nil {
			Usage()
			return
		}
		factory1035 := thrift.NewTJSONProtocolFactory()
		jsProt1036 := factory1035.GetProtocol(mbTrans1033)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
		err1037 := containerStruct0.ReadField1(context.Background(), jsProt1036)
		if err1037 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partitions_pspec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
			flag.Usage()
		}
		arg1038 := flag.Arg(1)
		mbTrans1039 := thrift.NewTMemoryBufferLen(len(arg1038))
		defer mbTrans1039.Close()
		_, err1040 := mbTrans1039.WriteString(arg1038)
		if err1040 != nil {
			Usage()
			return
		}
		factory1041 := thrift.NewTJSONProtocolFactory()
		jsProt1042 := factory1041.GetProtocol(mbTrans1039)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
		err1043 := containerStruct0.ReadField1(context.Background(), jsProt1042)
		if err1043 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1046 := flag.Arg(3)
		mbTrans1047 := thrift.NewTMemoryBufferLen(len(arg1046))
		defer mbTrans1047.Close()
		_, err1048 := mbTrans1047.WriteString(arg1046)
		if err1048 != nil {
			Usage()
			return
		}
		factory1049 := thrift.NewTJSONProtocolFactory()
		jsProt1050 := factory1049.GetProtocol(mbTrans1047)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
		err1051 := containerStruct2.ReadField3(context.Background(), jsProt1050)
		if err1051 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1052 := flag.Arg(1)
		mbTrans1053 := thrift.NewTMemoryBufferLen(len(arg1052))
		defer mbTrans1053.Close()
		_, err1054 := mbTrans1053.WriteString(arg1052)
		if err1054 != nil {
			Usage()
			return
		}
		factory1055 := thrift.NewTJSONProtocolFactory()
		jsProt1056 := factory1055.GetProtocol(mbTrans1053)
		argvalue0 := hive_metastore.NewAddPartitionsRequest()
		err1057 := argvalue0.Read(context.Background(), jsProt1056)
		if err1057 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1060 := flag.Arg(3)
		mbTrans1061 := thrift.NewTMemoryBufferLen(len(arg1060))
		defer mbTrans1061.Close()
		_, err1062 := mbTrans1061.WriteString(arg1060)
		if err1062 != nil {
			Usage()
			return
		}
		factory1063 := thrift.NewTJSONProtocolFactory()
		jsProt1064 := factory1063.GetProtocol(mbTrans1061)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
		err1065 := containerStruct2.ReadField3(context.Background(), jsProt1064)
		if err1065 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1066 := flag.Arg(4)
		mbTrans1067 := thrift.NewTMemoryBufferLen(len(arg1066))
		defer mbTrans1067.Close()
		_, err1068 := mbTrans1067.WriteString(arg1066)
		if err1068 != nil {
			Usage()
			return
		}
		factory1069 := thrift.NewTJSONProtocolFactory()
		jsProt1070 := factory1069.GetProtocol(mbTrans1067)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1071 := argvalue3.Read(context.Background(), jsProt1070)
		if err1071 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg1078 := flag.Arg(4)
		mbTrans1079 := thrift.NewTMemoryBufferLen(len(arg1078))
		defer mbTrans1079.Close()
		_, err1080 := mbTrans1079.WriteString(arg1078)
		if err1080 != nil {
			Usage()
			return
		}
		factory1081 := thrift.NewTJSONProtocolFactory()
		jsProt1082 := factory1081.GetProtocol(mbTrans1079)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1083 := argvalue3.Read(context.Background(), jsProt1082)
		if err1083 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1086 := flag.Arg(3)
		mbTrans1087 := thrift.NewTMemoryBufferLen(len(arg1086))
		defer mbTrans1087.Close()
		_, err1088 := mbTrans1087.WriteString(arg1086)
		if err1088 != nil {
			Usage()
			return
		}
		factory1089 := thrift.NewTJSONProtocolFactory()
		jsProt1090 := factory1089.GetProtocol(mbTrans1087)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
		err1091 := containerStruct2.ReadField3(context.Background(), jsProt1090)
		if err1091 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1095 := flag.Arg(3)
		mbTrans1096 := thrift.NewTMemoryBufferLen(len(arg1095))
		defer mbTrans1096.Close()
		_, err1097 := mbTrans1096.WriteString(arg1095)
		if err1097 != nil {
			Usage()
			return
		}
		factory1098 := thrift.NewTJSONProtocolFactory()
		jsProt1099 := factory1098.GetProtocol(mbTrans1096)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
		err1100 := containerStruct2.ReadField3(context.Background(), jsProt1099)
		if err1100 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg1102 := flag.Arg(5)
		mbTrans1103 := thrift.NewTMemoryBufferLen(len(arg1102))
		defer mbTrans1103.Close()
		_, err1104 := mbTrans1103.WriteString(arg1102)
		if err1104 != nil {
			Usage()
			return
		}
		factory1105 := thrift.NewTJSONProtocolFactory()
		jsProt1106 := factory1105.GetProtocol(mbTrans1103)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err1107 := argvalue4.Read(context.Background(), jsProt1106)
		if err1107 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg1116 := flag.Arg(5)
		mbTrans1117 := thrift.NewTMemoryBufferLen(len(arg1116))
		defer mbTrans1117.Close()
		_, err1118 := mbTrans1117.WriteString(arg1116)
		if err1118 != nil {
			Usage()
			return
		}
		factory1119 := thrift.NewTJSONProtocolFactory()
		jsProt1120 := factory1119.GetProtocol(mbTrans1117)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err1121 := argvalue4.Read(context.Background(), jsProt1120)
		if err1121 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1122 := flag.Arg(1)
		mbTrans1123 := thrift.NewTMemoryBufferLen(len(arg1122))
		defer mbTrans1123.Close()
		_, err1124 := mbTrans1123.WriteString(arg1122)
		if err1124 != nil {
			Usage()
			return
		}
		factory1125 := thrift.NewTJSONProtocolFactory()
		jsProt1126 := factory1125.GetProtocol(mbTrans1123)
		argvalue0 := hive_metastore.NewDropPartitionsRequest()
		err1127 := argvalue0.Read(context.Background(), jsProt1126)
		if err1127 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1130 := flag.Arg(3)
		mbTrans1131 := thrift.NewTMemoryBufferLen(len(arg1130))
		defer mbTrans1131.Close()
		_, err1132 := mbTrans1131.WriteString(arg1130)
		if err1132 != nil {
			Usage()
			return
		}
		factory1133 := thrift.NewTJSONProtocolFactory()
		jsProt1134 := factory1133.GetProtocol(mbTrans1131)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
		err1135 := containerStruct2.ReadField3(context.Background(), jsProt1134)
		if err1135 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "exchange_partition":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
			flag.Usage()
		}
		arg1136 := flag.Arg(1)
		mbTrans1137 := thrift.NewTMemoryBufferLen(len(arg1136))
		defer mbTrans1137.Close()
		_, err1138 := mbTrans1137.WriteString(arg1136)
		if err1138 != nil {
			Usage()
			return
		}
		factory1139 := thrift.NewTJSONProtocolFactory()
		jsProt1140 := factory1139.GetProtocol(mbTrans1137)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
		err1141 := containerStruct0.ReadField1(context.Background(), jsProt1140)
		if err1141 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "exchange_partitions":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
			flag.Usage()
		}
		arg1146 := flag.Arg(1)
		mbTrans1147 := thrift.NewTMemoryBufferLen(len(arg1146))
		defer mbTrans1147.Close()
		_, err1148 := mbTrans1147.WriteString(arg1146)
		if err1148 != nil {
			Usage()
			return
		}
		factory1149 := thrift.NewTJSONProtocolFactory()
		jsProt1150 := factory1149.GetProtocol(mbTrans1147)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
		err1151 := containerStruct0.ReadField1(context.Background(), jsProt1150)
		if err1151 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1158 := flag.Arg(3)
		mbTrans1159 := thrift.NewTMemoryBufferLen(len(arg1158))
		defer mbTrans1159.Close()
		_, err1160 := mbTrans1159.WriteString(arg1158)
		if err1160 != nil {
			Usage()
			return
		}
		factory1161 := thrift.NewTJSONProtocolFactory()
		jsProt1162 := factory1161.GetProtocol(mbTrans1159)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1163 := containerStruct2.ReadField3(context.Background(), jsProt1162)
		if err1163 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1165 := flag.Arg(5)
		mbTrans1166 := thrift.NewTMemoryBufferLen(len(arg1165))
		defer mbTrans1166.Close()
		_, err1167 := mbTrans1166.WriteString(arg1165)
		if err1167 != nil {
			Usage()
			return
		}
		factory1168 := thrift.NewTJSONProtocolFactory()
		jsProt1169 := factory1168.GetProtocol(mbTrans1166)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1170 := containerStruct4.ReadField5(context.Background(), jsProt1169)
		if err1170 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1176 := (strconv.Atoi(flag.Arg(3)))
		if err1176 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1179 := (strconv.Atoi(flag.Arg(3)))
		if err1179 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1181 := flag.Arg(5)
		mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
		defer mbTrans1182.Close()
		_, err1183 := mbTrans1182.WriteString(arg1181)
		if err1183 != nil {
			Usage()
			return
		}
		factory1184 := thrift.NewTJSONProtocolFactory()
		jsProt1185 := factory1184.GetProtocol(mbTrans1182)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
		err1186 := containerStruct4.ReadField5(context.Background(), jsProt1185)
		if err1186 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partitions_pspec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1189 := (strconv.Atoi(flag.Arg(3)))
		if err1189 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1192 := (strconv.Atoi(flag.Arg(3)))
		if err1192 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_values":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
			flag.Usage()
		}
		arg1193 := flag.Arg(1)
		mbTrans1194 := thrift.NewTMemoryBufferLen(len(arg1193))
		defer mbTrans1194.Close()
		_, err1195 := mbTrans1194.WriteString(arg1193)
		if err1195 != nil {
			Usage()
			return
		}
		factory1196 := thrift.NewTJSONProtocolFactory()
		jsProt1197 := factory1196.GetProtocol(mbTrans1194)
		argvalue0 := hive_metastore.NewPartitionValuesRequest()
		err1198 := argvalue0.Read(context.Background(), jsProt1197)
		if err1198 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionValues(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1201 := flag.Arg(3)
		mbTrans1202 := thrift.NewTMemoryBufferLen(len(arg1201))
		defer mbTrans1202.Close()
		_, err1203 := mbTrans1202.WriteString(arg1201)
		if err1203 != nil {
			Usage()
			return
		}
		factory1204 := thrift.NewTJSONProtocolFactory()
		jsProt1205 := factory1204.GetProtocol(mbTrans1202)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
		err1206 := containerStruct2.ReadField3(context.Background(), jsProt1205)
		if err1206 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1207 := (strconv.Atoi(flag.Arg(4)))
		if err1207 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1210 := flag.Arg(3)
		mbTrans1211 := thrift.NewTMemoryBufferLen(len(arg1210))
		defer mbTrans1211.Close()
		_, err1212 := mbTrans1211.WriteString(arg1210)
		if err1212 != nil {
			Usage()
			return
		}
		factory1213 := thrift.NewTJSONProtocolFactory()
		jsProt1214 := factory1213.GetProtocol(mbTrans1211)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1215 := containerStruct2.ReadField3(context.Background(), jsProt1214)
		if err1215 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1216 := (strconv.Atoi(flag.Arg(4)))
		if err1216 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg1218 := flag.Arg(6)
		mbTrans1219 := thrift.NewTMemoryBufferLen(len(arg1218))
		defer mbTrans1219.Close()
		_, err1220 := mbTrans1219.WriteString(arg1218)
		if err1220 != nil {
			Usage()
			return
		}
		factory1221 := thrift.NewTJSONProtocolFactory()
		jsProt1222 := factory1221.GetProtocol(mbTrans1219)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1223 := containerStruct5.ReadField6(context.Background(), jsProt1222)
		if err1223 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1226 := flag.Arg(3)
		mbTrans1227 := thrift.NewTMemoryBufferLen(len(arg1226))
		defer mbTrans1227.Close()
		_, err1228 := mbTrans1227.WriteString(arg1226)
		if err1228 != nil {
			Usage()
			return
		}
		factory1229 := thrift.NewTJSONProtocolFactory()
		jsProt1230 := factory1229.GetProtocol(mbTrans1227)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
		err1231 := containerStruct2.ReadField3(context.Background(), jsProt1230)
		if err1231 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1232 := (strconv.Atoi(flag.Arg(4)))
		if err1232 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1236 := (strconv.Atoi(flag.Arg(4)))
		if err1236 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_part_specs_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1240 := (strconv.Atoi(flag.Arg(4)))
		if err1240 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
			flag.Usage()
		}
		arg1241 := flag.Arg(1)
		mbTrans1242 := thrift.NewTMemoryBufferLen(len(arg1241))
		defer mbTrans1242.Close()
		_, err1243 := mbTrans1242.WriteString(arg1241)
		if err1243 != nil {
			Usage()
			return
		}
		factory1244 := thrift.NewTJSONProtocolFactory()
		jsProt1245 := factory1244.GetProtocol(mbTrans1242)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err1246 := argvalue0.Read(context.Background(), jsProt1245)
		if err1246 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_num_partitions_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_by_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1252 := flag.Arg(3)
		mbTrans1253 := thrift.NewTMemoryBufferLen(len(arg1252))
		defer mbTrans1253.Close()
		_, err1254 := mbTrans1253.WriteString(arg1252)
		if err1254 != nil {
			Usage()
			return
		}
		factory1255 := thrift.NewTJSONProtocolFactory()
		jsProt1256 := factory1255.GetProtocol(mbTrans1253)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
		err1257 := containerStruct2.ReadField3(context.Background(), jsProt1256)
		if err1257 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Names
		value2 := argvalue2
		fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1260 := flag.Arg(3)
		mbTrans1261 := thrift.NewTMemoryBufferLen(len(arg1260))
		defer mbTrans1261.Close()
		_, err1262 := mbTrans1261.WriteString(arg1260)
		if err1262 != nil {
			Usage()
			return
		}
		factory1263 := thrift.NewTJSONProtocolFactory()
		jsProt1264 := factory1263.GetProtocol(mbTrans1261)
		argvalue2 := hive_metastore.NewPartition()
		err1265 := argvalue2.Read(context.Background(), jsProt1264)
		if err1265 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1268 := flag.Arg(3)
		mbTrans1269 := thrift.NewTMemoryBufferLen(len(arg1268))
		defer mbTrans1269.Close()
		_, err1270 := mbTrans1269.WriteString(arg1268)
		if err1270 != nil {
			Usage()
			return
		}
		factory1271 := thrift.NewTJSONProtocolFactory()
		jsProt1272 := factory1271.GetProtocol(mbTrans1269)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
		err1273 := containerStruct2.ReadField3(context.Background(), jsProt1272)
		if err1273 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1276 := flag.Arg(3)
		mbTrans1277 := thrift.NewTMemoryBufferLen(len(arg1276))
		defer mbTrans1277.Close()
		_, err1278 := mbTrans1277.WriteString(arg1276)
		if err1278 != nil {
			Usage()
			return
		}
		factory1279 := thrift.NewTJSONProtocolFactory()
		jsProt1280 := factory1279.GetProtocol(mbTrans1277)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
		err1281 := containerStruct2.ReadField3(context.Background(), jsProt1280)
		if err1281 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		arg1282 := flag.Arg(4)
		mbTrans1283 := thrift.NewTMemoryBufferLen(len(arg1282))
		defer mbTrans1283.Close()
		_, err1284 := mbTrans1283.WriteString(arg1282)
		if err1284 != nil {
			Usage()
			return
		}
		factory1285 := thrift.NewTJSONProtocolFactory()
		jsProt1286 := factory1285.GetProtocol(mbTrans1283)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1287 := argvalue3.Read(context.Background(), jsProt1286)
		if err1287 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1290 := flag.Arg(3)
		mbTrans1291 := thrift.NewTMemoryBufferLen(len(arg1290))
		defer mbTrans1291.Close()
		_, err1292 := mbTrans1291.WriteString(arg1290)
		if err1292 != nil {
			Usage()
			return
		}
		factory1293 := thrift.NewTJSONProtocolFactory()
		jsProt1294 := factory1293.GetProtocol(mbTrans1291)
		argvalue2 := hive_metastore.NewPartition()
		err1295 := argvalue2.Read(context.Background(), jsProt1294)
		if err1295 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1296 := flag.Arg(4)
		mbTrans1297 := thrift.NewTMemoryBufferLen(len(arg1296))
		defer mbTrans1297.Close()
		_, err1298 := mbTrans1297.WriteString(arg1296)
		if err1298 != nil {
			Usage()
			return
		}
		factory1299 := thrift.NewTJSONProtocolFactory()
		jsProt1300 := factory1299.GetProtocol(mbTrans1297)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1301 := argvalue3.Read(context.Background(), jsProt1300)
		if err1301 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1304 := flag.Arg(3)
		mbTrans1305 := thrift.NewTMemoryBufferLen(len(arg1304))
		defer mbTrans1305.Close()
		_, err1306 := mbTrans1305.WriteString(arg1304)
		if err1306 != nil {
			Usage()
			return
		}
		factory1307 := thrift.NewTJSONProtocolFactory()
		jsProt1308 := factory1307.GetProtocol(mbTrans1305)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
		err1309 := containerStruct2.ReadField3(context.Background(), jsProt1308)
		if err1309 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1310 := flag.Arg(4)
		mbTrans1311 := thrift.NewTMemoryBufferLen(len(arg1310))
		defer mbTrans1311.Close()
		_, err1312 := mbTrans1311.WriteString(arg1310)
		if err1312 != nil {
			Usage()
			return
		}
		factory1313 := thrift.NewTJSONProtocolFactory()
		jsProt1314 := factory1313.GetProtocol(mbTrans1311)
		argvalue3 := hive_metastore.NewPartition()
		err1315 := argvalue3.Read(context.Background(), jsProt1314)
		if err1315 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "partition_name_has_valid_characters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
			flag.Usage()
		}
		arg1316 := flag.Arg(1)
		mbTrans1317 := thrift.NewTMemoryBufferLen(len(arg1316))
		defer mbTrans1317.Close()
		_, err1318 := mbTrans1317.WriteString(arg1316)
		if err1318 != nil {
			Usage()
			return
		}
		factory1319 := thrift.NewTJSONProtocolFactory()
		jsProt1320 := factory1319.GetProtocol(mbTrans1317)
		containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
		err1321 := containerStruct0.ReadField1(context.Background(), jsProt1320)
		if err1321 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartVals
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(context.Background(), value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "markPartitionForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1329 := flag.Arg(3)
		mbTrans1330 := thrift.NewTMemoryBufferLen(len(arg1329))
		defer mbTrans1330.Close()
		_, err1331 := mbTrans1330.WriteString(arg1329)
		if err1331 != nil {
			Usage()
			return
		}
		factory1332 := thrift.NewTJSONProtocolFactory()
		jsProt1333 := factory1332.GetProtocol(mbTrans1330)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
		err1334 := containerStruct2.ReadField3(context.Background(), jsProt1333)
		if err1334 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "isPartitionMarkedForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1337 := flag.Arg(3)
		mbTrans1338 := thrift.NewTMemoryBufferLen(len(arg1337))
		defer mbTrans1338.Close()
		_, err1339 := mbTrans1338.WriteString(arg1337)
		if err1339 != nil {
			Usage()
			return
		}
		factory1340 := thrift.NewTJSONProtocolFactory()
		jsProt1341 := factory1340.GetProtocol(mbTrans1338)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
		err1342 := containerStruct2.ReadField3(context.Background(), jsProt1341)
		if err1342 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "add_index":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
			flag.Usage()
		}
		arg1343 := flag.Arg(1)
		mbTrans1344 := thrift.NewTMemoryBufferLen(len(arg1343))
		defer mbTrans1344.Close()
		_, err1345 := mbTrans1344.WriteString(arg1343)
		if err1345 != nil {
			Usage()
			return
		}
		factory1346 := thrift.NewTJSONProtocolFactory()
		jsProt1347 := factory1346.GetProtocol(mbTrans1344)
		argvalue0 := hive_metastore.NewIndex()
		err1348 := argvalue0.Read(context.Background(), jsProt1347)
		if err1348 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1349 := flag.Arg(2)
		mbTrans1350 := thrift.NewTMemoryBufferLen(len(arg1349))
		defer mbTrans1350.Close()
		_, err1351 := mbTrans1350.WriteString(arg1349)
		if err1351 != nil {
			Usage()
			return
		}
		factory1352 := thrift.NewTJSONProtocolFactory()
		jsProt1353 := factory1352.GetProtocol(mbTrans1350)
		argvalue1 := hive_metastore.NewTable()
		err1354 := argvalue1.Read(context.Background(), jsProt1353)
		if err1354 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddIndex(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_index":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg1358 := flag.Arg(4)
		mbTrans1359 := thrift.NewTMemoryBufferLen(len(arg1358))
		defer mbTrans1359.Close()
		_, err1360 := mbTrans1359.WriteString(arg1358)
		if err1360 != nil {
			Usage()
			return
		}
		factory1361 := thrift.NewTJSONProtocolFactory()
		jsProt1362 := factory1361.GetProtocol(mbTrans1359)
		argvalue3 := hive_metastore.NewIndex()
		err1363 := argvalue3.Read(context.Background(), jsProt1362)
		if err1363 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_index_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_index_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_indexes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1373 := (strconv.Atoi(flag.Arg(3)))
		if err1373 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_index_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1376 := (strconv.Atoi(flag.Arg(3)))
		if err1376 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_primary_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
			flag.Usage()
		}
		arg1377 := flag.Arg(1)
		mbTrans1378 := thrift.NewTMemoryBufferLen(len(arg1377))
		defer mbTrans1378.Close()
		_, err1379 := mbTrans1378.WriteString(arg1377)
		if err1379 != nil {
			Usage()
			return
		}
		factory1380 := thrift.NewTJSONProtocolFactory()
		jsProt1381 := factory1380.GetProtocol(mbTrans1378)
		argvalue0 := hive_metastore.NewPrimaryKeysRequest()
		err1382 := argvalue0.Read(context.Background(), jsProt1381)
		if err1382 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_foreign_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
			flag.Usage()
		}
		arg1383 := flag.Arg(1)
		mbTrans1384 := thrift.NewTMemoryBufferLen(len(arg1383))
		defer mbTrans1384.Close()
		_, err1385 := mbTrans1384.WriteString(arg1383)
		if err1385 != nil {
			Usage()
			return
		}
		factory1386 := thrift.NewTJSONProtocolFactory()
		jsProt1387 := factory1386.GetProtocol(mbTrans1384)
		argvalue0 := hive_metastore.NewForeignKeysRequest()
		err1388 := argvalue0.Read(context.Background(), jsProt1387)
		if err1388 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetForeignKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_unique_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
			flag.Usage()
		}
		arg1389 := flag.Arg(1)
		mbTrans1390 := thrift.NewTMemoryBufferLen(len(arg1389))
		defer mbTrans1390.Close()
		_, err1391 := mbTrans1390.WriteString(arg1389)
		if err1391 != nil {
			Usage()
			return
		}
		factory1392 := thrift.NewTJSONProtocolFactory()
		jsProt1393 := factory1392.GetProtocol(mbTrans1390)
		argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
		err1394 := argvalue0.Read(context.Background(), jsProt1393)
		if err1394 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_not_null_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
			flag.Usage()
		}
		arg1395 := flag.Arg(1)
		mbTrans1396 := thrift.NewTMemoryBufferLen(len(arg1395))
		defer mbTrans1396.Close()
		_, err1397 := mbTrans1396.WriteString(arg1395)
		if err1397 != nil {
			Usage()
			return
		}
		factory1398 := thrift.NewTJSONProtocolFactory()
		jsProt1399 := factory1398.GetProtocol(mbTrans1396)
		argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
		err1400 := argvalue0.Read(context.Background(), jsProt1399)
		if err1400 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_table_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1401 := flag.Arg(1)
		mbTrans1402 := thrift.NewTMemoryBufferLen(len(arg1401))
		defer mbTrans1402.Close()
		_, err1403 := mbTrans1402.WriteString(arg1401)
		if err1403 != nil {
			Usage()
			return
		}
		factory1404 := thrift.NewTJSONProtocolFactory()
		jsProt1405 := factory1404.GetProtocol(mbTrans1402)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1406 := argvalue0.Read(context.Background(), jsProt1405)
		if err1406 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1407 := flag.Arg(1)
		mbTrans1408 := thrift.NewTMemoryBufferLen(len(arg1407))
		defer mbTrans1408.Close()
		_, err1409 := mbTrans1408.WriteString(arg1407)
		if err1409 != nil {
			Usage()
			return
		}
		factory1410 := thrift.NewTJSONProtocolFactory()
		jsProt1411 := factory1410.GetProtocol(mbTrans1408)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1412 := argvalue0.Read(context.Background(), jsProt1411)
		if err1412 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1420 := flag.Arg(1)
		mbTrans1421 := thrift.NewTMemoryBufferLen(len(arg1420))
		defer mbTrans1421.Close()
		_, err1422 := mbTrans1421.WriteString(arg1420)
		if err1422 != nil {
			Usage()
			return
		}
		factory1423 := thrift.NewTJSONProtocolFactory()
		jsProt1424 := factory1423.GetProtocol(mbTrans1421)
		argvalue0 := hive_metastore.NewTableStatsRequest()
		err1425 := argvalue0.Read(context.Background(), jsProt1424)
		if err1425 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1426 := flag.Arg(1)
		mbTrans1427 := thrift.NewTMemoryBufferLen(len(arg1426))
		defer mbTrans1427.Close()
		_, err1428 := mbTrans1427.WriteString(arg1426)
		if err1428 != nil {
			Usage()
			return
		}
		factory1429 := thrift.NewTJSONProtocolFactory()
		jsProt1430 := factory1429.GetProtocol(mbTrans1427)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1431 := argvalue0.Read(context.Background(), jsProt1430)
		if err1431 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1432 := flag.Arg(1)
		mbTrans1433 := thrift.NewTMemoryBufferLen(len(arg1432))
		defer mbTrans1433.Close()
		_, err1434 := mbTrans1433.WriteString(arg1432)
		if err1434 != nil {
			Usage()
			return
		}
		factory1435 := thrift.NewTJSONProtocolFactory()
		jsProt1436 := factory1435.GetProtocol(mbTrans1433)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1437 := argvalue0.Read(context.Background(), jsProt1436)
		if err1437 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1438 := flag.Arg(1)
		mbTrans1439 := thrift.NewTMemoryBufferLen(len(arg1438))
		defer mbTrans1439.Close()
		_, err1440 := mbTrans1439.WriteString(arg1438)
		if err1440 != nil {
			Usage()
			return
		}
		factory1441 := thrift.NewTJSONProtocolFactory()
		jsProt1442 := factory1441.GetProtocol(mbTrans1439)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1443 := argvalue0.Read(context.Background(), jsProt1442)
		if err1443 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "delete_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "delete_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "create_function":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
			flag.Usage()
		}
		arg1451 := flag.Arg(1)
		mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
		defer mbTrans1452.Close()
		_, err1453 := mbTrans1452.WriteString(arg1451)
		if err1453 != nil {
			Usage()
			return
		}
		factory1454 := thrift.NewTJSONProtocolFactory()
		jsProt1455 := factory1454.GetProtocol(mbTrans1452)
		argvalue0 := hive_metastore.NewFunction()
		err1456 := argvalue0.Read(context.Background(), jsProt1455)
		if err1456 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateFunction(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DropFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_function":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1461 := flag.Arg(3)
		mbTrans1462 := thrift.NewTMemoryBufferLen(len(arg1461))
		defer mbTrans1462.Close()
		_, err1463 := mbTrans1462.WriteString(arg1461)
		if err1463 != nil {
			Usage()
			return
		}
		factory1464 := thrift.NewTJSONProtocolFactory()
		jsProt1465 := factory1464.GetProtocol(mbTrans1462)
		argvalue2 := hive_metastore.NewFunction()
		err1466 := argvalue2.Read(context.Background(), jsProt1465)
		if err1466 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_functions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunctions(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_all_functions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllFunctions(context.Background()))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg1471 := flag.Arg(1)
		mbTrans1472 := thrift.NewTMemoryBufferLen(len(arg1471))
		defer mbTrans1472.Close()
		_, err1473 := mbTrans1472.WriteString(arg1471)
		if err1473 != nil {
			Usage()
			return
		}
		factory1474 := thrift.NewTJSONProtocolFactory()
		jsProt1475 := factory1474.GetProtocol(mbTrans1472)
		argvalue0 := hive_metastore.NewRole()
		err1476 := argvalue0.Read(context.Background(), jsProt1475)
		if err1476 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames(context.Background()))
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive_metastore.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "grant_revoke_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
			flag.Usage()
		}
		arg1485 := flag.Arg(1)
		mbTrans1486 := thrift.NewTMemoryBufferLen(len(arg1485))
		defer mbTrans1486.Close()
		_, err1487 := mbTrans1486.WriteString(arg1485)
		if err1487 != nil {
			Usage()
			return
		}
		factory1488 := thrift.NewTJSONProtocolFactory()
		jsProt1489 := factory1488.GetProtocol(mbTrans1486)
		argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
		err1490 := argvalue0.Read(context.Background(), jsProt1489)
		if err1490 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokeRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_principals_in_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
			flag.Usage()
		}
		arg1491 := flag.Arg(1)
		mbTrans1492 := thrift.NewTMemoryBufferLen(len(arg1491))
		defer mbTrans1492.Close()
		_, err1493 := mbTrans1492.WriteString(arg1491)
		if err1493 != nil {
			Usage()
			return
		}
		factory1494 := thrift.NewTJSONProtocolFactory()
		jsProt1495 := factory1494.GetProtocol(mbTrans1492)
		argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
		err1496 := argvalue0.Read(context.Background(), jsProt1495)
		if err1496 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_grants_for_principal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
			flag.Usage()
		}
		arg1497 := flag.Arg(1)
		mbTrans1498 := thrift.NewTMemoryBufferLen(len(arg1497))
		defer mbTrans1498.Close()
		_, err1499 := mbTrans1498.WriteString(arg1497)
		if err1499 != nil {
			Usage()
			return
		}
		factory1500 := thrift.NewTJSONProtocolFactory()
		jsProt1501 := factory1500.GetProtocol(mbTrans1498)
		argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
		err1502 := argvalue0.Read(context.Background(), jsProt1501)
		if err1502 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg1503 := flag.Arg(1)
		mbTrans1504 := thrift.NewTMemoryBufferLen(len(arg1503))
		defer mbTrans1504.Close()
		_, err1505 := mbTrans1504.WriteString(arg1503)
		if err1505 != nil {
			Usage()
			return
		}
		factory1506 := thrift.NewTJSONProtocolFactory()
		jsProt1507 := factory1506.GetProtocol(mbTrans1504)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1508 := argvalue0.Read(context.Background(), jsProt1507)
		if err1508 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1510 := flag.Arg(3)
		mbTrans1511 := thrift.NewTMemoryBufferLen(len(arg1510))
		defer mbTrans1511.Close()
		_, err1512 := mbTrans1511.WriteString(arg1510)
		if err1512 != nil {
			Usage()
			return
		}
		factory1513 := thrift.NewTJSONProtocolFactory()
		jsProt1514 := factory1513.GetProtocol(mbTrans1511)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
		err1515 := containerStruct2.ReadField3(context.Background(), jsProt1514)
		if err1515 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		arg1517 := flag.Arg(3)
		mbTrans1518 := thrift.NewTMemoryBufferLen(len(arg1517))
		defer mbTrans1518.Close()
		_, err1519 := mbTrans1518.WriteString(arg1517)
		if err1519 != nil {
			Usage()
			return
		}
		factory1520 := thrift.NewTJSONProtocolFactory()
		jsProt1521 := factory1520.GetProtocol(mbTrans1518)
		argvalue2 := hive_metastore.NewHiveObjectRef()
		err1522 := argvalue2.Read(context.Background(), jsProt1521)
		if err1522 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg1523 := flag.Arg(1)
		mbTrans1524 := thrift.NewTMemoryBufferLen(len(arg1523))
		defer mbTrans1524.Close()
		_, err1525 := mbTrans1524.WriteString(arg1523)
		if err1525 != nil {
			Usage()
			return
		}
		factory1526 := thrift.NewTJSONProtocolFactory()
		jsProt1527 := factory1526.GetProtocol(mbTrans1524)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1528 := argvalue0.Read(context.Background(), jsProt1527)
		if err1528 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1529 := flag.Arg(1)
		mbTrans1530 := thrift.NewTMemoryBufferLen(len(arg1529))
		defer mbTrans1530.Close()
		_, err1531 := mbTrans1530.WriteString(arg1529)
		if err1531 != nil {
			Usage()
			return
		}
		factory1532 := thrift.NewTJSONProtocolFactory()
		jsProt1533 := factory1532.GetProtocol(mbTrans1530)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1534 := argvalue0.Read(context.Background(), jsProt1533)
		if err1534 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "grant_revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1535 := flag.Arg(1)
		mbTrans1536 := thrift.NewTMemoryBufferLen(len(arg1535))
		defer mbTrans1536.Close()
		_, err1537 := mbTrans1536.WriteString(arg1535)
		if err1537 != nil {
			Usage()
			return
		}
		factory1538 := thrift.NewTJSONProtocolFactory()
		jsProt1539 := factory1538.GetProtocol(mbTrans1536)
		argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1540 := argvalue0.Read(context.Background(), jsProt1539)
		if err1540 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_ugi":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1542 := flag.Arg(2)
		mbTrans1543 := thrift.NewTMemoryBufferLen(len(arg1542))
		defer mbTrans1543.Close()
		_, err1544 := mbTrans1543.WriteString(arg1542)
		if err1544 != nil {
			Usage()
			return
		}
		factory1545 := thrift.NewTJSONProtocolFactory()
		jsProt1546 := factory1545.GetProtocol(mbTrans1543)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
		err1547 := containerStruct1.ReadField2(context.Background(), jsProt1546)
		if err1547 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.GroupNames
		value1 := argvalue1
		fmt.Print(client.SetUgi(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_token_identifiers":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
		fmt.Print("\n")
		break
	case "add_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_master_key":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
			flag.Usage()
		}
		tmp0, err1557 := (strconv.Atoi(flag.Arg(1)))
		if err1557 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
			flag.Usage()
		}
		tmp0, err1559 := (strconv.Atoi(flag.Arg(1)))
		if err1559 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.RemoveMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_master_keys":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMasterKeys(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxns(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns_info":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxnsInfo(context.Background()))
		fmt.Print("\n")
		break
	case "open_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
			flag.Usage()
		}
		arg1560 := flag.Arg(1)
		mbTrans1561 := thrift.NewTMemoryBufferLen(len(arg1560))
		defer mbTrans1561.Close()
		_, err1562 := mbTrans1561.WriteString(arg1560)
		if err1562 != nil {
			Usage()
			return
		}
		factory1563 := thrift.NewTJSONProtocolFactory()
		jsProt1564 := factory1563.GetProtocol(mbTrans1561)
		argvalue0 := hive_metastore.NewOpenTxnRequest()
		err1565 := argvalue0.Read(context.Background(), jsProt1564)
		if err1565 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
			flag.Usage()
		}
		arg1566 := flag.Arg(1)
		mbTrans1567 := thrift.NewTMemoryBufferLen(len(arg1566))
		defer mbTrans1567.Close()
		_, err1568 := mbTrans1567.WriteString(arg1566)
		if err1568 != nil {
			Usage()
			return
		}
		factory1569 := thrift.NewTJSONProtocolFactory()
		jsProt1570 := factory1569.GetProtocol(mbTrans1567)
		argvalue0 := hive_metastore.NewAbortTxnRequest()
		err1571 := argvalue0.Read(context.Background(), jsProt1570)
		if err1571 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
			flag.Usage()
		}
		arg1572 := flag.Arg(1)
		mbTrans1573 := thrift.NewTMemoryBufferLen(len(arg1572))
		defer mbTrans1573.Close()
		_, err1574 := mbTrans1573.WriteString(arg1572)
		if err1574 != nil {
			Usage()
			return
		}
		factory1575 := thrift.NewTJSONProtocolFactory()
		jsProt1576 := factory1575.GetProtocol(mbTrans1573)
		argvalue0 := hive_metastore.NewAbortTxnsRequest()
		err1577 := argvalue0.Read(context.Background(), jsProt1576)
		if err1577 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "commit_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
			flag.Usage()
		}
		arg1578 := flag.Arg(1)
		mbTrans1579 := thrift.NewTMemoryBufferLen(len(arg1578))
		defer mbTrans1579.Close()
		_, err1580 := mbTrans1579.WriteString(arg1578)
		if err1580 != nil {
			Usage()
			return
		}
		factory1581 := thrift.NewTJSONProtocolFactory()
		jsProt1582 := factory1581.GetProtocol(mbTrans1579)
		argvalue0 := hive_metastore.NewCommitTxnRequest()
		err1583 := argvalue0.Read(context.Background(), jsProt1582)
		if err1583 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lock requires 1 args")
			flag.Usage()
		}
		arg1584 := flag.Arg(1)
		mbTrans1585 := thrift.NewTMemoryBufferLen(len(arg1584))
		defer mbTrans1585.Close()
		_, err1586 := mbTrans1585.WriteString(arg1584)
		if err1586 != nil {
			Usage()
			return
		}
		factory1587 := thrift.NewTJSONProtocolFactory()
		jsProt1588 := factory1587.GetProtocol(mbTrans1585)
		argvalue0 := hive_metastore.NewLockRequest()
		err1589 := argvalue0.Read(context.Background(), jsProt1588)
		if err1589 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "check_lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
			flag.Usage()
		}
		arg1590 := flag.Arg(1)
		mbTrans1591 := thrift.NewTMemoryBufferLen(len(arg1590))
		defer mbTrans1591.Close()
		_, err1592 := mbTrans1591.WriteString(arg1590)
		if err1592 != nil {
			Usage()
			return
		}
		factory1593 := thrift.NewTJSONProtocolFactory()
		jsProt1594 := factory1593.GetProtocol(mbTrans1591)
		argvalue0 := hive_metastore.NewCheckLockRequest()
		err1595 := argvalue0.Read(context.Background(), jsProt1594)
		if err1595 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckLock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unlock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
			flag.Usage()
		}
		arg1596 := flag.Arg(1)
		mbTrans1597 := thrift.NewTMemoryBufferLen(len(arg1596))
		defer mbTrans1597.Close()
		_, err1598 := mbTrans1597.WriteString(arg1596)
		if err1598 != nil {
			Usage()
			return
		}
		factory1599 := thrift.NewTJSONProtocolFactory()
		jsProt1600 := factory1599.GetProtocol(mbTrans1597)
		argvalue0 := hive_metastore.NewUnlockRequest()
		err1601 := argvalue0.Read(context.Background(), jsProt1600)
		if err1601 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unlock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_locks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
			flag.Usage()
		}
		arg1602 := flag.Arg(1)
		mbTrans1603 := thrift.NewTMemoryBufferLen(len(arg1602))
		defer mbTrans1603.Close()
		_, err1604 := mbTrans1603.WriteString(arg1602)
		if err1604 != nil {
			Usage()
			return
		}
		factory1605 := thrift.NewTJSONProtocolFactory()
		jsProt1606 := factory1605.GetProtocol(mbTrans1603)
		argvalue0 := hive_metastore.NewShowLocksRequest()
		err1607 := argvalue0.Read(context.Background(), jsProt1606)
		if err1607 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowLocks(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
			flag.Usage()
		}
		arg1608 := flag.Arg(1)
		mbTrans1609 := thrift.NewTMemoryBufferLen(len(arg1608))
		defer mbTrans1609.Close()
		_, err1610 := mbTrans1609.WriteString(arg1608)
		if err1610 != nil {
			Usage()
			return
		}
		factory1611 := thrift.NewTJSONProtocolFactory()
		jsProt1612 := factory1611.GetProtocol(mbTrans1609)
		argvalue0 := hive_metastore.NewHeartbeatRequest()
		err1613 := argvalue0.Read(context.Background(), jsProt1612)
		if err1613 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Heartbeat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat_txn_range":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
			flag.Usage()
		}
		arg1614 := flag.Arg(1)
		mbTrans1615 := thrift.NewTMemoryBufferLen(len(arg1614))
		defer mbTrans1615.Close()
		_, err1616 := mbTrans1615.WriteString(arg1614)
		if err1616 != nil {
			Usage()
			return
		}
		factory1617 := thrift.NewTJSONProtocolFactory()
		jsProt1618 := factory1617.GetProtocol(mbTrans1615)
		argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
		err1619 := argvalue0.Read(context.Background(), jsProt1618)
		if err1619 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		arg1620 := flag.Arg(1)
		mbTrans1621 := thrift.NewTMemoryBufferLen(len(arg1620))
		defer mbTrans1621.Close()
		_, err1622 := mbTrans1621.WriteString(arg1620)
		if err1622 != nil {
			Usage()
			return
		}
		factory1623 := thrift.NewTJSONProtocolFactory()
		jsProt1624 := factory1623.GetProtocol(mbTrans1621)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1625 := argvalue0.Read(context.Background(), jsProt1624)
		if err1625 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
			flag.Usage()
		}
		arg1626 := flag.Arg(1)
		mbTrans1627 := thrift.NewTMemoryBufferLen(len(arg1626))
		defer mbTrans1627.Close()
		_, err1628 := mbTrans1627.WriteString(arg1626)
		if err1628 != nil {
			Usage()
			return
		}
		factory1629 := thrift.NewTJSONProtocolFactory()
		jsProt1630 := factory1629.GetProtocol(mbTrans1627)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err1631 := argvalue0.Read(context.Background(), jsProt1630)
		if err1631 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
			flag.Usage()
		}
		arg1632 := flag.Arg(1)
		mbTrans1633 := thrift.NewTMemoryBufferLen(len(arg1632))
		defer mbTrans1633.Close()
		_, err1634 := mbTrans1633.WriteString(arg1632)
		if err1634 != nil {
			Usage()
			return
		}
		factory1635 := thrift.NewTJSONProtocolFactory()
		jsProt1636 := factory1635.GetProtocol(mbTrans1633)
		argvalue0 := hive_metastore.NewShowCompactRequest()
		err1637 := argvalue0.Read(context.Background(), jsProt1636)
		if err1637 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowCompact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_dynamic_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
			flag.Usage()
		}
		arg1638 := flag.Arg(1)
		mbTrans1639 := thrift.NewTMemoryBufferLen(len(arg1638))
		defer mbTrans1639.Close()
		_, err1640 := mbTrans1639.WriteString(arg1638)
		if err1640 != nil {
			Usage()
			return
		}
		factory1641 := thrift.NewTJSONProtocolFactory()
		jsProt1642 := factory1641.GetProtocol(mbTrans1639)
		argvalue0 := hive_metastore.NewAddDynamicPartitions()
		err1643 := argvalue0.Read(context.Background(), jsProt1642)
		if err1643 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_next_notification":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
			flag.Usage()
		}
		arg1644 := flag.Arg(1)
		mbTrans1645 := thrift.NewTMemoryBufferLen(len(arg1644))
		defer mbTrans1645.Close()
		_, err1646 := mbTrans1645.WriteString(arg1644)
		if err1646 != nil {
			Usage()
			return
		}
		factory1647 := thrift.NewTJSONProtocolFactory()
		jsProt1648 := factory1647.GetProtocol(mbTrans1645)
		argvalue0 := hive_metastore.NewNotificationEventRequest()
		err1649 := argvalue0.Read(context.Background(), jsProt1648)
		if err1649 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNextNotification(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_current_notificationEventId":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
		fmt.Print("\n")
		break
	case "get_notification_events_count":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
			flag.Usage()
		}
		arg1650 := flag.Arg(1)
		mbTrans1651 := thrift.NewTMemoryBufferLen(len(arg1650))
		defer mbTrans1651.Close()
		_, err1652 := mbTrans1651.WriteString(arg1650)
		if err1652 != nil {
			Usage()
			return
		}
		factory1653 := thrift.NewTJSONProtocolFactory()
		jsProt1654 := factory1653.GetProtocol(mbTrans1651)
		argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
		err1655 := argvalue0.Read(context.Background(), jsProt1654)
		if err1655 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fire_listener_event":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
			flag.Usage()
		}
		arg1656 := flag.Arg(1)
		mbTrans1657 := thrift.NewTMemoryBufferLen(len(arg1656))
		defer mbTrans1657.Close()
		_, err1658 := mbTrans1657.WriteString(arg1656)
		if err1658 != nil {
			Usage()
			return
		}
		factory1659 := thrift.NewTJSONProtocolFactory()
		jsProt1660 := factory1659.GetProtocol(mbTrans1657)
		argvalue0 := hive_metastore.NewFireEventRequest()
		err1661 := argvalue0.Read(context.Background(), jsProt1660)
		if err1661 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FireListenerEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "flushCache":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FlushCache(context.Background()))
		fmt.Print("\n")
		break
	case "cm_recycle":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
			flag.Usage()
		}
		arg1662 := flag.Arg(1)
		mbTrans1663 := thrift.NewTMemoryBufferLen(len(arg1662))
		defer mbTrans1663.Close()
		_, err1664 := mbTrans1663.WriteString(arg1662)
		if err1664 != nil {
			Usage()
			return
		}
		factory1665 := thrift.NewTJSONProtocolFactory()
		jsProt1666 := factory1665.GetProtocol(mbTrans1663)
		argvalue0 := hive_metastore.NewCmRecycleRequest()
		err1667 := argvalue0.Read(context.Background(), jsProt1666)
		if err1667 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CmRecycle(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
			flag.Usage()
		}
		arg1668 := flag.Arg(1)
		mbTrans1669 := thrift.NewTMemoryBufferLen(len(arg1668))
		defer mbTrans1669.Close()
		_, err1670 := mbTrans1669.WriteString(arg1668)
		if err1670 != nil {
			Usage()
			return
		}
		factory1671 := thrift.NewTJSONProtocolFactory()
		jsProt1672 := factory1671.GetProtocol(mbTrans1669)
		argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
		err1673 := argvalue0.Read(context.Background(), jsProt1672)
		if err1673 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1674 := flag.Arg(1)
		mbTrans1675 := thrift.NewTMemoryBufferLen(len(arg1674))
		defer mbTrans1675.Close()
		_, err1676 := mbTrans1675.WriteString(arg1674)
		if err1676 != nil {
			Usage()
			return
		}
		factory1677 := thrift.NewTJSONProtocolFactory()
		jsProt1678 := factory1677.GetProtocol(mbTrans1675)
		argvalue0 := hive_metastore.NewGetFileMetadataRequest()
		err1679 := argvalue0.Read(context.Background(), jsProt1678)
		if err1679 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "put_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1680 := flag.Arg(1)
		mbTrans1681 := thrift.NewTMemoryBufferLen(len(arg1680))
		defer mbTrans1681.Close()
		_, err1682 := mbTrans1681.WriteString(arg1680)
		if err1682 != nil {
			Usage()
			return
		}
		factory1683 := thrift.NewTJSONProtocolFactory()
		jsProt1684 := factory1683.GetProtocol(mbTrans1681)
		argvalue0 := hive_metastore.NewPutFileMetadataRequest()
		err1685 := argvalue0.Read(context.Background(), jsProt1684)
		if err1685 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "clear_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1686 := flag.Arg(1)
		mbTrans1687 := thrift.NewTMemoryBufferLen(len(arg1686))
		defer mbTrans1687.Close()
		_, err1688 := mbTrans1687.WriteString(arg1686)
		if err1688 != nil {
			Usage()
			return
		}
		factory1689 := thrift.NewTJSONProtocolFactory()
		jsProt1690 := factory1689.GetProtocol(mbTrans1687)
		argvalue0 := hive_metastore.NewClearFileMetadataRequest()
		err1691 := argvalue0.Read(context.Background(), jsProt1690)
		if err1691 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ClearFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cache_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
			flag.Usage()
		}
		arg1692 := flag.Arg(1)
		mbTrans1693 := thrift.NewTMemoryBufferLen(len(arg1692))
		defer mbTrans1693.Close()
		_, err1694 := mbTrans1693.WriteString(arg1692)
		if err1694 != nil {
			Usage()
			return
		}
		factory1695 := thrift.NewTJSONProtocolFactory()
		jsProt1696 := factory1695.GetProtocol(mbTrans1693)
		argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
		err1697 := argvalue0.Read(context.Background(), jsProt1696)
		if err1697 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CacheFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_metastore_db_uuid":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMetastoreDbUUID(context.Background()))
		fmt.Print("\n")
		break
	case "create_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1698 := flag.Arg(1)
		mbTrans1699 := thrift.NewTMemoryBufferLen(len(arg1698))
		defer mbTrans1699.Close()
		_, err1700 := mbTrans1699.WriteString(arg1698)
		if err1700 != nil {
			Usage()
			return
		}
		factory1701 := thrift.NewTJSONProtocolFactory()
		jsProt1702 := factory1701.GetProtocol(mbTrans1699)
		argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
		err1703 := argvalue0.Read(context.Background(), jsProt1702)
		if err1703 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1704 := flag.Arg(1)
		mbTrans1705 := thrift.NewTMemoryBufferLen(len(arg1704))
		defer mbTrans1705.Close()
		_, err1706 := mbTrans1705.WriteString(arg1704)
		if err1706 != nil {
			Usage()
			return
		}
		factory1707 := thrift.NewTJSONProtocolFactory()
		jsProt1708 := factory1707.GetProtocol(mbTrans1705)
		argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
		err1709 := argvalue0.Read(context.Background(), jsProt1708)
		if err1709 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_active_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1710 := flag.Arg(1)
		mbTrans1711 := thrift.NewTMemoryBufferLen(len(arg1710))
		defer mbTrans1711.Close()
		_, err1712 := mbTrans1711.WriteString(arg1710)
		if err1712 != nil {
			Usage()
			return
		}
		factory1713 := thrift.NewTJSONProtocolFactory()
		jsProt1714 := factory1713.GetProtocol(mbTrans1711)
		argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
		err1715 := argvalue0.Read(context.Background(), jsProt1714)
		if err1715 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_resource_plans":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
			flag.Usage()
		}
		arg1716 := flag.Arg(1)
		mbTrans1717 := thrift.NewTMemoryBufferLen(len(arg1716))
		defer mbTrans1717.Close()
		_, err1718 := mbTrans1717.WriteString(arg1716)
		if err1718 != nil {
			Usage()
			return
		}
		factory1719 := thrift.NewTJSONProtocolFactory()
		jsProt1720 := factory1719.GetProtocol(mbTrans1717)
		argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
		err1721 := argvalue0.Read(context.Background(), jsProt1720)
		if err1721 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1722 := flag.Arg(1)
		mbTrans1723 := thrift.NewTMemoryBufferLen(len(arg1722))
		defer mbTrans1723.Close()
		_, err1724 := mbTrans1723.WriteString(arg1722)
		if err1724 != nil {
			Usage()
			return
		}
		factory1725 := thrift.NewTJSONProtocolFactory()
		jsProt1726 := factory1725.GetProtocol(mbTrans1723)
		argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
		err1727 := argvalue0.Read(context.Background(), jsProt1726)
		if err1727 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "validate_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1728 := flag.Arg(1)
		mbTrans1729 := thrift.NewTMemoryBufferLen(len(arg1728))
		defer mbTrans1729.Close()
		_, err1730 := mbTrans1729.WriteString(arg1728)
		if err1730 != nil {
			Usage()
			return
		}
		factory1731 := thrift.NewTJSONProtocolFactory()
		jsProt1732 := factory1731.GetProtocol(mbTrans1729)
		argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
		err1733 := argvalue0.Read(context.Background(), jsProt1732)
		if err1733 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
			flag.Usage()
		}
		arg1734 := flag.Arg(1)
		mbTrans1735 := thrift.NewTMemoryBufferLen(len(arg1734))
		defer mbTrans1735.Close()
		_, err1736 := mbTrans1735.WriteString(arg1734)
		if err1736 != nil {
			Usage()
			return
		}
		factory1737 := thrift.NewTJSONProtocolFactory()
		jsProt1738 := factory1737.GetProtocol(mbTrans1735)
		argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
		err1739 := argvalue0.Read(context.Background(), jsProt1738)
		if err1739 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1740 := flag.Arg(1)
		mbTrans1741 := thrift.NewTMemoryBufferLen(len(arg1740))
		defer mbTrans1741.Close()
		_, err1742 := mbTrans1741.WriteString(arg1740)
		if err1742 != nil {
			Usage()
			return
		}
		factory1743 := thrift.NewTJSONProtocolFactory()
		jsProt1744 := factory1743.GetProtocol(mbTrans1741)
		argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
		err1745 := argvalue0.Read(context.Background(), jsProt1744)
		if err1745 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1746 := flag.Arg(1)
		mbTrans1747 := thrift.NewTMemoryBufferLen(len(arg1746))
		defer mbTrans1747.Close()
		_, err1748 := mbTrans1747.WriteString(arg1746)
		if err1748 != nil {
			Usage()
			return
		}
		factory1749 := thrift.NewTJSONProtocolFactory()
		jsProt1750 := factory1749.GetProtocol(mbTrans1747)
		argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
		err1751 := argvalue0.Read(context.Background(), jsProt1750)
		if err1751 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
			flag.Usage()
		}
		arg1752 := flag.Arg(1)
		mbTrans1753 := thrift.NewTMemoryBufferLen(len(arg1752))
		defer mbTrans1753.Close()
		_, err1754 := mbTrans1753.WriteString(arg1752)
		if err1754 != nil {
			Usage()
			return
		}
		factory1755 := thrift.NewTJSONProtocolFactory()
		jsProt1756 := factory1755.GetProtocol(mbTrans1753)
		argvalue0 := hive_metastore.NewWMDropTriggerRequest()
		err1757 := argvalue0.Read(context.Background(), jsProt1756)
		if err1757 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_triggers_for_resourceplan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
			flag.Usage()
		}
		arg1758 := flag.Arg(1)
		mbTrans1759 := thrift.NewTMemoryBufferLen(len(arg1758))
		defer mbTrans1759.Close()
		_, err1760 := mbTrans1759.WriteString(arg1758)
		if err1760 != nil {
			Usage()
			return
		}
		factory1761 := thrift.NewTJSONProtocolFactory()
		jsProt1762 := factory1761.GetProtocol(mbTrans1759)
		argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
		err1763 := argvalue0.Read(context.Background(), jsProt1762)
		if err1763 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
